{"version":3,"sources":["Components/Home.tsx","Components/About.tsx","Components/Works.tsx","Components/Experience.tsx","Components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","props","state","title","className","id","style","left","top","position","color","this","React","Component","About","paddingTop","Works","Experience","Footer","backgroundColor","href","textAlign","width","paddingBottom","App","Container","fluid","Navbar","fixed","bg","variant","Brand","Toggle","aria-controls","Collapse","Nav","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SA0BeA,G,wDAdX,WAAYC,GAAmB,IAAD,8BAC1B,cAAMA,IACDC,MAAQ,CAAEC,MAAO,oEAFI,E,qDAM1B,OACA,yBAAKC,UAAU,QAAQC,GAAK,QACxB,wBAAIC,MAAO,CAACC,KAAK,MAAQC,IAAK,MAAOC,SAAS,WAAYC,MAAM,YAAcC,KAAKT,MAAMC,Y,GAVlFS,IAAMC,YCgBVC,E,kDAdX,WAAYb,GAAoB,IAAD,8BAC3B,cAAMA,IACDC,MAAQ,CAAEC,MAAO,4UAFK,E,qDAM3B,OACA,yBAAKC,UAAU,QAAQC,GAAG,SACtB,wBAAIC,MAAO,CAACS,WAAY,QAASL,MAAM,YAAcC,KAAKT,MAAMC,Y,GAVxDS,IAAMC,WCgBXG,E,kDAdX,WAAYf,GAAoB,IAAD,8BAC3B,cAAMA,IACDC,MAAQ,CAAEC,MAAO,SAFK,E,qDAM3B,OACA,yBAAKC,UAAU,QAAQC,GAAK,SACxB,wBAAIC,MAAO,CAACS,WAAY,QAASL,MAAM,YAAcC,KAAKT,MAAMC,Y,GAVxDS,IAAMC,WCgBXI,E,kDAdX,WAAYhB,GAAyB,IAAD,8BAChC,cAAMA,IACDC,MAAQ,CAAEC,MAAO,cAFU,E,qDAMhC,OACA,yBAAKC,UAAU,QAAQC,GAAK,cACxB,wBAAIC,MAAO,CAACS,WAAY,QAASL,MAAM,YAAcC,KAAKT,MAAMC,Y,GAVnDS,IAAMC,WCqBhBK,E,kDAhBX,WAAYjB,GAAqB,IAAD,8BAC5B,cAAMA,IACDC,MAAQ,CAAEC,MAAO,kCAFM,E,qDAM5B,OACA,4BAAQG,MAAO,CAACa,gBAAgB,YAC5B,uBAAGC,KAAK,2DACJ,yBAAKd,MAAO,CAACe,UAAU,SAAWX,MAAM,UAAWY,MAAM,QAASC,cAAe,SAAUZ,KAAKT,MAAMC,a,GAXjGS,IAAMC,WCsEZW,E,kDAjEb,WAAYvB,GAAmB,IAAD,8BAC5B,cAAMA,IACDC,MAAQ,GAFe,E,qDA6B5B,OACE,kBAAC,IAAD,KACA,kBAACuB,EAAA,EAAD,CAAWrB,UAAU,MAAMsB,OAAO,GAEhC,kBAACC,EAAA,EAAD,CAAQC,MAAM,MAAMC,GAAG,UAAUC,QAAQ,QACvC,kBAACH,EAAA,EAAOI,MAAR,CAAcX,KAAK,UAAnB,cACA,kBAACO,EAAA,EAAOK,OAAR,CAAe5B,UAAU,WAAW6B,gBAAc,kBAClD,kBAACN,EAAA,EAAOO,SAAR,CAAiB7B,GAAG,iBAClB,kBAAC8B,EAAA,EAAD,CAAK/B,UAAU,WACb,uBAAGA,UAAU,WAAWgB,KAAK,WAA7B,SACA,uBAAGhB,UAAU,WAAWgB,KAAK,gBAA7B,cACA,uBAAGhB,UAAU,WAAWgB,KAAK,WAA7B,SAIA,kBAAC,IAAD,CAAMhB,UAAU,WAAWgC,GAAG,UAA9B,SACA,kBAAC,IAAD,CAAMhC,UAAU,WAAWgC,GAAG,WAA9B,aAIN,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,Y,GAvDUxB,IAAMC,WCLJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3e70a13d.chunk.js","sourcesContent":["import React from \"react\"\n\ninterface HomeProps{\n\n}\n\ninterface HomeStates{\n    title : string\n}\n\nclass Home extends React.Component<HomeProps, HomeStates>{\n\n    constructor(props: HomeProps) {\n        super(props);\n        this.state = { title: \"Hello, I am Aaron Chen. Software Engineer based in Vancouver, BC\" };\n    }\n\n    render() {\n        return (\n        <div className=\"pages\" id = \"home\">\n            <h1 style={{left:'10%' , top: '50%', position:'absolute', color:'#FFFFFF' }}>{this.state.title}</h1>\n        </div>\n        );\n      }\n}\n\nexport default Home;","import React from \"react\"\n\ninterface AboutProps{\n\n}\n\ninterface AboutStates{\n    title : string\n}\n\nclass About extends React.Component<AboutProps, AboutStates>{\n\n    constructor(props: AboutProps) {\n        super(props);\n        this.state = { title: \"Hello, I'm Aaron Chen, a software engineer with 4+ years of experience in Windows desktop application development and 1 year experience in Android development. Have Code refactoring experience. Know how to keep code clean and easy to read also have the best performance. Eager to learn moreÂ to continuously improve my skills.\" };\n    }\n\n    render() {\n        return (\n        <div className=\"pages\" id=\"about\">\n            <h1 style={{paddingTop: \"200px\", color:'#FFFFFF' }}>{this.state.title}</h1>\n        </div>\n        );\n      }\n}\n\nexport default About;","import React from \"react\"\n\ninterface WorksProps{\n\n}\n\ninterface WorksStates{\n    title : string\n}\n\nclass Works extends React.Component<WorksProps, WorksStates>{\n\n    constructor(props: WorksProps) {\n        super(props);\n        this.state = { title: \"Works\" };\n    }\n\n    render() {\n        return (\n        <div className=\"pages\" id = \"works\">\n            <h1 style={{paddingTop: \"200px\", color:'#FFFFFF' }}>{this.state.title}</h1>\n        </div>\n        );\n      }\n}\n\nexport default Works;","import React from \"react\"\n\ninterface ExperienceProps{\n\n}\n\ninterface ExperienceStates{\n    title : string\n}\n\nclass Experience extends React.Component<ExperienceProps, ExperienceStates>{\n\n    constructor(props: ExperienceProps) {\n        super(props);\n        this.state = { title: \"Experience\" };\n    }\n\n    render() {\n        return (\n        <div className=\"pages\" id = \"experience\">\n            <h1 style={{paddingTop: \"200px\", color:'#FFFFFF' }}>{this.state.title}</h1>\n        </div>\n        );\n      }\n}\n\nexport default Experience;","import React from \"react\"\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\ninterface FooterProps{\n\n}\n\ninterface FooterStates{\n    title : string\n}\n\nclass Footer extends React.Component<FooterProps, FooterStates>{\n\n    constructor(props: FooterProps) {\n        super(props);\n        this.state = { title: \"Designed & Built by Aaron Chen\" };\n    }\n\n    render() {\n        return (\n        <footer style={{backgroundColor:\"#1D1D21\" }} >\n            <a href=\"https://github.com/AaronCChen2233/Portfolio/tree/master\">\n                <div style={{textAlign:\"center\" , color:'#FFFFFF', width:\"100hv\", paddingBottom: \"60px\"}}>{this.state.title}</div>\n            </a>\n        </footer>\n        );\n      }\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route, Link } from \"react-router-dom\"\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport Home from './Components/Home';\nimport About from './Components/About';\nimport Works from './Components/Works';\nimport Experience from './Components/Experience';\nimport Footer from './Components/Footer';\n\ninterface AppProps{\n    \n}\n\nclass App extends React.Component{\n  constructor(props : AppProps) {\n    super(props);\n    this.state = {\n      // title: 'Aaron Chen',\n      // headerLinks: [\n      //   { title: 'About', path: '/about' },\n      //   { title: 'Experience', path: '/experience' },\n      //   { title: 'Works', path: '/works' }\n      // ],\n\n      // home:{\n      //   title:'Hello, I am Aaron Chen. Software Engineer based in Vancouver, BC'\n      // },\n\n      // about: {\n      //   title: 'About Me'\n      // },\n\n      // experience: {\n      //   title: 'experience'\n      // },\n\n      // works: {\n      //   title: 'Works'\n      // }\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n      <Container className=\"p-0\" fluid={true}>\n      {/* className=\"border-bottom\" */}\n        <Navbar fixed=\"top\" bg=\"#1D1D21\" variant=\"dark\">\n          <Navbar.Brand href=\"/#home\">Aaron Chen</Navbar.Brand>\n          <Navbar.Toggle className=\"border-0\" aria-controls=\"navbar-toggle\" />\n          <Navbar.Collapse id=\"navbar-toggle\">\n            <Nav className=\"ml-auto\">\n              <a className=\"nav-link\" href=\"/#about\">About</a>\n              <a className=\"nav-link\" href=\"/#experience\">Experience</a>\n              <a className=\"nav-link\" href=\"/#works\">Works</a>\n\n              {/* <Link className=\"nav-link\" to=\"/experience\">Experience</Link>\n              <Link className=\"nav-link\" to=\"/works\">Works</Link> */}\n              <Link className=\"nav-link\" to=\"/email\">Email</Link>\n              <Link className=\"nav-link\" to=\"/resume\">Resume</Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <Home></Home>\n        <About></About>\n        <Experience></Experience>\n        <Works></Works>\n\n        <Footer></Footer>\n      </Container>\n      \n    </Router>\n\n  \n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}